MODULE Display;	
(* Name:      Module VGADisplay.Mod                         *)
(* Purpose:   Analogon to Display-Module for B/W Monitor       *)
(* Date:      18.3.92    /	3. 6. 93                                      *)
(* Author:    Ott Hans-Werner                                  *)
(* ARD, 31.08.94 Pharlap version                                  *)

	IMPORT Kernel, SYSTEM, DOS, ColorDisplay, Objects;
	
	CONST
		black* = 0; white* = 15; 
		BG* = 0; FG* = 15; (*background, foreground*)
		replace* = 0; paint* = 1; invert* = 2; (*operation modes*)
		
		remove* = 0; suspend* = 1; restore* = 2; (*ControlMsg id*)
		reduce* = 0; extend* = 1; move* = 2; (*ModifyMsg id*)
		display* = 0; state* = 1; (*ModifyMsg mode*)
		frame* = 0; area* = 1; (*DisplayMsg id*)
		contents* = 0; view* = 1; (*PrintMsg id*)
		get* = 0; set* = 1; reset* = 2; (*SelectMsg id*)
		drop* = 0; integrate* = 1; (*ConsumeMsg id*)
		
	TYPE Pattern* = LONGINT;
			PatternPtr = POINTER TO RECORD w, h, pixmap: SHORTINT END;

			Frame* = POINTER TO FrameDesc;
			FrameDesc* = RECORD (Objects.ObjDesc)
				next*, dsc*: Frame;
				X*, Y*, W*, H*: INTEGER
			END;
  
			FrameMsg* = RECORD (Objects.ObjMsg)
				F*: Frame; (*target*)
				x*, y*, res*: INTEGER
			END;
		
			ControlMsg* = RECORD (FrameMsg)
				id*: INTEGER
			END;
		
			ModifyMsg* = RECORD (FrameMsg)
				id*, mode*: INTEGER;
				dX*, dY*, dW*, dH*: INTEGER;
				X*, Y*, W*, H*: INTEGER
			END;
		
			DisplayMsg* = RECORD (FrameMsg)
				id*: INTEGER;
				u*, v*, w*, h*: INTEGER
			END;
		
			PrintMsg* = RECORD (FrameMsg)
				id*, pageno*: INTEGER
			END;

			LocateMsg* = RECORD (FrameMsg)
				loc*: Frame;
				X*, Y*, u*, v*: INTEGER
			END;
		
			SelectMsg* = RECORD (FrameMsg)
				id*: INTEGER;
				time*: LONGINT;
				sel*: Frame;
				obj*: Objects.Object
			END;
		
			ConsumeMsg* = RECORD (FrameMsg)
				id*: INTEGER;
				u*, v*: INTEGER;
				obj*: Objects.Object
			END;
		
			MsgProc* = PROCEDURE (VAR M: FrameMsg);

	VAR
		Unit*: LONGINT; (* RasterUnit = Unit/36000 mm *)
		Left*, (* left margin of black-and-white maps *)
		ColLeft*, (* left margin of color maps *)
		Bottom*, (* bottom of primary map *)
		UBottom*, (* bottom of secondary map *)
		Width*, (* map width *)
		Height*: (* map hight*)
			INTEGER;
			
		arrow*, star*, cross*, downArrow*, hook*: Pattern;
		grey0*, grey1*, grey2*, ticks*, solid*: Pattern;

		Broadcast*: MsgProc;

		Pat: ARRAY 60 OF PatternPtr;
		count: LONGINT;

	PROCEDURE max (i, j: INTEGER): INTEGER; BEGIN IF i >= j THEN RETURN i ELSE RETURN j END END max;
	PROCEDURE min (i, j: LONGINT): INTEGER; BEGIN  IF i >= j THEN RETURN SHORT(j) ELSE RETURN SHORT(i) END END min;
		
	PROCEDURE Map*(X: INTEGER): LONGINT;
	BEGIN RETURN 0 
	END Map;
	
	PROCEDURE AdjustClip*(X, Y, W, H: INTEGER);
	VAR clipx, clipy, clipw, cliph, right, top, clipright, cliptop: INTEGER;
	BEGIN 
		ColorDisplay.Getclip(clipx, clipy, clipw, cliph);
		clipright := clipx + clipw; cliptop := clipy + cliph;
		right := X + W; top := Y + H; clipx := max(clipx, X); clipy := max(clipy, Y); 
		clipright := min(right, clipright); cliptop := min(top, cliptop);
		ColorDisplay.Setclip(clipx, clipy, clipright - clipx, cliptop - clipy);
	END AdjustClip;

	PROCEDURE GetDim*(pat: Pattern; VAR w, h: INTEGER);
	VAR s: SHORTINT;
	BEGIN SYSTEM.GET(pat, s); w := s; SYSTEM.GET(pat+1, s); h := s; 
	END GetDim;

	PROCEDURE ResetClip*;
	BEGIN ColorDisplay.Resetclip
	END ResetClip;
	
	PROCEDURE SetClip*(x, y, w, h: INTEGER);
	BEGIN ColorDisplay.Setclip(x, y, w, h)
	END SetClip;
	
	PROCEDURE GetClip*(VAR x, y, w, h: INTEGER);
	BEGIN ColorDisplay.Getclip(x, y, w, h)
	END GetClip;
	
	PROCEDURE SetColor*(col, red, green, blue: INTEGER);	(* 0 <= col, red, green, blue < 256 *)
	BEGIN
		IF col = 0 THEN
			IF red > 128 THEN 
 				SYSTEM.PUTREG(0, 1001H); SYSTEM.PUTREG(3, 03F00H); SYSTEM.INT(10H);
			ELSE 
				SYSTEM.PUTREG(0, 1001H); SYSTEM.PUTREG(3, 0H); SYSTEM.INT(10H);
			END;
		END;
			(* see table 8.11 of Ferraro, 3rd edition *)
		IF col = 6 THEN col := 14H ELSIF col > 7 THEN col := col + 30H END;
		red := (red + 4) DIV 4 -1;
		green := (green + 4) DIV 4 -1;
		blue := (blue + 4) DIV 4 -1;
		(*$ DInline.Assemble
		MOV AX, col[EBP]
		MOV EDX, $3C8
		OUT DX, AL
		MOV EDX, $3C9
		MOV AX, red[EBP]
		OUT DX, AL
		MOV AX, green[EBP]
		OUT DX, AL
		MOV AX, blue[EBP]
		OUT DX, AL
		END *)
	END SetColor;

	PROCEDURE GetColor*(col: INTEGER; VAR red, green, blue: INTEGER);
	BEGIN
		IF col = 6 THEN col := 14H ELSIF col > 7 THEN col := col + 30H END;
		(*$ DInline.Assemble
		MOV AX, col[EBP]
		MOV EDX, $3C7
		OUT DX, AL
		XOR EAX, EAX
		MOV EDX, $3C9
		IN AL, DX
		MOV EBX, red[EBP]
		MOV [EBX], AX
		IN AL, DX
		MOV EBX, green[EBP]
		MOV [EBX], AX
		IN AL, DX
		MOV EBX, blue[EBP]
		MOV [EBX], AX
		END *);
		red := red * 4 + red DIV 16;
		green := green * 4 + green DIV 16;
		blue := blue * 4 + blue DIV 16;
	END GetColor;
	
	PROCEDURE Dot*(col, x, y, mode: INTEGER);
	BEGIN ColorDisplay.Dot;
	END Dot;
	
	PROCEDURE CopyBlock*(SX, SY, W, H, DX, DY, mode: INTEGER);
	BEGIN ColorDisplay.CopyBlock;
	END CopyBlock;
	
	PROCEDURE SetMode*(X: INTEGER; s: SET);
	BEGIN END SetMode;
	
	PROCEDURE CopyPattern*(col: INTEGER; pat: Pattern; X, Y, mode: INTEGER);
	BEGIN ColorDisplay.CopyPattern;
	END CopyPattern;
	
	PROCEDURE ReplConst*(col, X, Y, W, H, mode: INTEGER);
	BEGIN ColorDisplay.ReplConst;
	END ReplConst;
	
	PROCEDURE FillPattern*(col: INTEGER; pat: Pattern; pX, pY, X, Y, W, H, mode: INTEGER);
	BEGIN ColorDisplay.ReplPattern;
	END FillPattern;

	PROCEDURE ReplPattern*(col: INTEGER; pat: Pattern; X, Y, W, H, mode: INTEGER);
	BEGIN FillPattern(col, pat, 0, 0, X, Y, W, H, mode);
	END ReplPattern;
	
	PROCEDURE NewPattern*(width, height: INTEGER; VAR image: ARRAY OF SET): Pattern;
	VAR len, src, dest: LONGINT; i: INTEGER; p: PatternPtr; inter: SET;
	BEGIN 
		len := (width+7) DIV 8;
		SYSTEM.NEW(p, 4+len*height); p.w := SHORT(width); p.h := SHORT(height);
		src := SYSTEM.ADR(image); dest := SYSTEM.ADR(p.pixmap);
		i := 0;
		WHILE i < height DO SYSTEM.MOVE(src, dest, len); INC(src, 4); INC(dest, len); INC(i) END;
		Pat[count] := p; INC(count);
		RETURN SYSTEM.ADR(p.w)
	END NewPattern;
	
	PROCEDURE CreatePatterns;
	VAR image: ARRAY 16 OF SET;
	BEGIN
		image[0] := {13};
		image[1] := {12..14};
		image[2] := {11..13};
		image[3] := {10..12};
		image[4] := {9..11};
		image[5] := {8..10};
		image[6] := {7..9};
		image[7] := {0, 6..8};
		image[8] := {0, 1, 5..7};
		image[9] := {0..2, 4..6};
		image[10] := {0..5};
		image[11] := {0..4};
		image[12] := {0..5};
		image[13] := {0..6};
		image[14] := {0..7};
		arrow := NewPattern(15, 15, image);
		
		image[0] := {0, 10};
		image[1] := {1, 9};
		image[2] := {2, 8};
		image[3] := {3, 7};
		image[4] := {4, 6};
		image[5] := {};
		image[6] := {4, 6};
		image[7] := {3, 7};
		image[8] := {2, 8};
		image[9] := {1, 9};
		image[10] := {0, 10};
		cross := NewPattern(11, 11, image); 
		
		image[0] := {6};
		image[1] := {5..7};
		image[2] := {4..8};
		image[3] := {3..9};
		image[4] := {2..10};
		image[5] := {5..7};
		image[6] := {5..7};
		image[7] := {5..7};
		image[8] := {5..7};
		image[9] := {5..7};
		image[10] := {5..7};
		image[11] := {5..7};
		image[12] := {5..7};
		image[13] := {5..7};
		image[14] := {};
		downArrow := NewPattern(15, 15, image);
		
		image[0] := {0, 4, 8, 12};
		image[1] := {};
		image[2] := {2, 6, 10, 14};
		image[3] := {};
		image[4] := {0, 4, 8, 12};
		image[5] := {};
		image[6] := {2, 6, 10, 14};
		image[7] := {};
		image[8] := {0, 4, 8, 12};
		image[9] := {};
		image[10] := {2, 6, 10, 14};
		image[11] := {};
		image[12] := {0, 4, 8, 12};
		image[13] := {};
		image[14] := {2, 6, 10, 14};
		image[15] := {};
		grey0 := NewPattern(16, 16, image);
		
		image[0] := {0, 2, 4, 6, 8, 10, 12, 14};
		image[1] := {1, 3, 5, 7, 9, 11, 13, 15};
		image[2] := {0, 2, 4, 6, 8, 10, 12, 14};
		image[3] := {1, 3, 5, 7, 9, 11, 13, 15};
		image[4] := {0, 2, 4, 6, 8, 10, 12, 14};
		image[5] := {1, 3, 5, 7, 9, 11, 13, 15};
		image[6] := {0, 2, 4, 6, 8, 10, 12, 14};
		image[7] := {1, 3, 5, 7, 9, 11, 13, 15};
		image[8] := {0, 2, 4, 6, 8, 10, 12, 14};
		image[9] := {1, 3, 5, 7, 9, 11, 13, 15};
		image[10] := {0, 2, 4, 6, 8, 10, 12, 14};
		image[11] := {1, 3, 5, 7, 9, 11, 13, 15};
		image[12] := {0, 2, 4, 6, 8, 10, 12, 14};
		image[13] := {1, 3, 5, 7, 9, 11, 13, 15};
		image[14] := {0, 2, 4, 6, 8, 10, 12, 14};
		image[15] := {1, 3, 5, 7, 9, 11, 13, 15};
		grey1 := NewPattern(16, 16, image);
		
		image[0] := {0, 1, 4, 5, 8, 9, 12, 13};
		image[1] := {0, 1, 4, 5, 8, 9, 12, 13};
		image[2] := {2, 3, 6, 7, 10, 11, 14, 15};
		image[3] := {2, 3, 6, 7, 10, 11, 14, 15};
		image[4] := {0, 1, 4, 5, 8, 9, 12, 13};
		image[5] := {0, 1, 4, 5, 8, 9, 12, 13};
		image[6] := {2, 3, 6, 7, 10, 11, 14, 15};
		image[7] := {2, 3, 6, 7, 10, 11, 14, 15};
		image[8] := {0, 1, 4, 5, 8, 9, 12, 13};
		image[9] := {0, 1, 4, 5, 8, 9, 12, 13};
		image[10] := {2, 3, 6, 7, 10, 11, 14, 15};
		image[11] := {2, 3, 6, 7, 10, 11, 14, 15};
		image[12] := {0, 1, 4, 5, 8, 9, 12, 13};
		image[13] := {0, 1, 4, 5, 8, 9, 12, 13};
		image[14] := {2, 3, 6, 7, 10, 11, 14, 15};
		image[15] := {2, 3, 6, 7, 10, 11, 14, 15};
		grey2 := NewPattern(16, 16, image);
		
		image[0] := {0..2, 8..11};
		image[1] := {0..2, 7..10};
		image[2] := {0..2, 6..9};
		image[3] := {0..2, 5..8};
		image[4] := {0..2, 4..7};
		image[5] := {0..6};
		image[6] := {0..5};
		image[7] := {0..4};
		image[8] := {0..3};
		image[9] := {0..2};
		image[10] := {0, 1};
		image[11] := {0};
		hook := NewPattern(12, 12, image);
		
		image[0] := {7};
		image[1] := {7};
		image[2] := {2, 7, 12};
		image[3] := {3, 7, 11};
		image[4] := {4, 7, 10};
		image[5] := {5, 7, 9};
		image[6] := {6..8};
		image[7] := {0..6, 8..14};
		image[8] := {6..8};
		image[9] := {5, 7, 9};
		image[10] := {4, 7, 10};
		image[11] := {3, 7, 11};
		image[12] := {2, 7, 12};
		image[13] := {7};
		image[14] := {7};
		star := NewPattern(15, 15, image);
		
		image[0] := {};
		image[1] := {};
		image[2] := {0};
		image[3] := {};
		image[4] := {};
		image[5] := {};
		image[6] := {};
		image[7] := {};
		image[8] := {};
		image[9] := {};
		image[10] := {};
		image[11] := {};
		image[12] := {};
		image[13] := {};
		image[14] := {};
		image[15] := {};
		ticks := NewPattern(16, 16, image);
		
		image[0] := -{};
		image[1] := -{};
		solid := NewPattern(16, 2, image);
		
	END CreatePatterns;
	
	PROCEDURE Depth*(X: INTEGER): INTEGER;
	BEGIN RETURN 4 END Depth; 
	
	PROCEDURE DisplayBlock*(B:LONGINT; DX, DY, W, H, SX, SY, mode:INTEGER);
	VAR BitmapWth, locW, locH, locAddr, SourceAdr, DestAdr, AreaHeight: LONGINT;
	BEGIN
		locW := Width DIV 8;
		locH := Height-2;
		locAddr := Kernel.Display;
	(*$ DInline.Assemble
							CLI
							MOV ESI, 36[EBP]			; address of bitmap descriptor
							MOV EDI, 12[ESI]
							MOV EAX, 8[ESI] 
							MOV BitmapWth[EBP], EAX
							MOVZX ECX, 28[EBP] : word
							IMUL EAX,ECX
							MOVZX EBX, 32[EBP] :word
							ADD EAX, EBX	
							ADD EAX, EDI				; source address
							MOV SourceAdr[EBP], EAX 	
							MOV ESI, EAX				; esi = source index register
							MOV EAX, locW[EBP] 
							MOV EBX, locH[EBP] 
							SUB EBX,12[EBP] :double
							IMUL EAX,EBX 
							MOVZX EBX, 16[EBP] :word
							SHR EBX,3
							ADD EAX, EBX
;							ADD EAX, locAddr[EBP]		; destination address
							MOV DestAdr[EBP], EAX		
							MOV EDI, EAX				; edi = destination index register
							MOV DX, $03CE
							MOV AL, 3
							MOV BX, 8[EBP]
							CMP BX, $1
							JE DispPMode
							JG DispIMode
DispRMode  		MOV AH,$00
							JMP DispSetMode
DispPMode		  MOV AH, $10
							JMP DispSetMode
DispIMode	  	MOV AH, $18
DispSetMode	  OUT DX, AX
							MOV AX, $0205
							OUT DX, AX				  ; set writemode 2, readmode 0
							MOV CL, 16[EBP]
							AND CL, 7						; DX MOD 8
							MOV AX, $8008 		
							SHR AH,CL					  ; prepare bitmask
							MOV DestAdr[EBP], EDI
							MOVZX ECX, 20[EBP] :word
							IMUL ECX, BitmapWth[EBP] :word
							ADD ECX, ESI
							MOVZX EBX, 24[EBP] :word
							MOV AreaHeight[EBP], EBX
DispRowLoop 	 JE DispEnd
							OUT DX, AX					; set bitmask register
							MOV SourceAdr[EBP], ESI
DispColLoop		CMP ESI, ECX
							JGE DispColEnd
							MOV BL, GS:[EDI]
							MOV BL, [ESI]				; get PEL from bitmap
							MOV GS:[EDI], BL				; write PEL to VGA
							ADD ESI, BitmapWth[EBP]
							SUB EDI, locW[EBP]
							JMP DispColLoop
DispColEnd		  MOV ESI, SourceAdr[EBP]
							INC ESI
							INC ECX
							MOV EDI, DestAdr[EBP]
							ROR AH,1
							JNB NextCol
							INC EDI	
							MOV DestAdr[EBP], EDI
NextCol				DEC AreaHeight[EBP]:double		  	; next row
							JMP DispRowLoop
DispEnd			 MOV AL, 3						; restore invert mode
							MOV AH, $18
							OUT DX, AX
							MOV AX, $FF08				; enable all latches
							OUT DX, AX
							MOV AX, $05					; restore read/write mode 0
							OUT DX, AX
							STI
		END *)
	END DisplayBlock;

	PROCEDURE SetBorder;
	VAR ch: CHAR;
	BEGIN
		SYSTEM.PORTIN(3DAH, ch);
		SYSTEM.PORTOUT(3C0H, 11X);
		SYSTEM.PORTOUT(3C0H, 0FFX);
		SYSTEM.PORTOUT(3C0H, 020X)
	END SetBorder;
	
BEGIN
	Width := 640; DOS.DispWidth := Width;
	Height := 480; DOS.DispHeight := Height;
	Left:= 0; ColLeft:= 0; Bottom:= 0; UBottom:= -330; 
	count := 0;
	DOS.InitDisplay(12H);
	ColorDisplay.Init(Kernel.Display, Height, Width);
	CreatePatterns; SetBorder;
	Unit := 10000;
	SYSTEM.PUTREG(0, 1001H); SYSTEM.PUTREG(3, 03F00H); SYSTEM.INT(10H);
	SetColor(0,255,255,255);
END Display.
